import math

def sha256(data):
    # Helper functions defined by the SHA-256 algorithm
    def rotr(x, n):
        return (x >> n) | (x << (32 - n))

    def sigma0(x):
        return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22)

    def sigma1(x):
        return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25)

    def ch(x, y, z):
        return (x & y) ^ (~x & z)

    def maj(x, y, z):
        return (x & y) ^ (x & z) ^ (y & z)

    def sum0(x):
        return rotr(x, 7) ^ rotr(x, 18) ^ (x >> 3)

    def sum1(x):
        return rotr(x, 17) ^ rotr(x, 19) ^ (x >> 10)

    # Initialization of hash variables
    h0 = 0x6a09e667
    h1 = 0xbb67ae85
    h2 = 0x3c6ef372
    h3 = 0xa54ff53a
    h4 = 0x510e527f
    h5 = 0x9b05688c
    h6 = 0x1f83d9ab
    h7 = 0x5be0cd19

    # Preprocessing of data
    data_bytes = bytearray(data.encode('utf-8'))
    data_bits = ''.join(format(byte, '08b') for byte in data_bytes)
    data_bits += '1'
    while len(data_bits) % 512 != 448:
        data_bits += '0'
    data_bits += format(len(data_bytes) * 8, '064b')

    # Processing in 512-bit blocks
    for i in range(0, len(data_bits), 512):
        block = data_bits[i:i + 512]

        # Splitting the block into 32-bit words
        words = [int(block[j:j + 32], 2) for j in range(0, 512, 32)]

        # Extension of words to a total of 64 words
        for j in range(16, 64):
            s0 = rotr(words[j - 15], 7) ^ rotr(words[j - 15], 18) ^ (words[j - 15] >> 3)
            s1 = rotr(words[j - 2], 17) ^ rotr(words[j - 2], 19) ^ (words[j - 2] >> 10)
            words.append((words[j - 16] + s0 + words[j - 7] + s1) % 2**32)

        # Initialization of working variables
        a, b, c, d, e, f, g, h = h0, h1, h2, h3, h4, h5, h6, h7

        # Main loop
        for j in range(64):
            s0 = sigma0(a) % 2**32
            s1 = sigma1(e) % 2**32
            ch_result = ch(e, f, g) % 2**32
            temp1 = (h + s1 + ch_result + k[j] + words[j]) % 2**32
            maj_result = maj(a, b, c) % 2**32
            temp2 = (s0 + maj_result) % 2**32

            h = g
            g = f
            f = e
            e = (d + temp1) % 2**32
            d = c
            c = b
            b = a
            a = (temp1 + temp2) % 2**32

        # Update hash variables
        h0 = (h0 + a) % 2**32
        h1 = (h1 + b) % 2**32
        h2 = (h2 + c) % 2**32
        h3 = (h3 + d) % 2**32
        h4 = (h4 + e) % 2**32
        h5 = (h5 + f) % 2**32
        h6 = (h6 + g) % 2**32
        h7 = (h7 + h) % 2**32

    # Concatenate intermediate hashes to get the final result
    result = ''.join(format(val, '08x') for val in [h0, h1, h2, h3, h4, h5, h6, h7])

    return result

# Constants specific to the SHA-256 algorithm
k = [math.floor(2**32 * abs(math.sin(i + 1))) for i in range(64)]

# Example of usage
data_to_hash = "Hello, World!"
hashed_result = sha256(data_to_hash)
print(f"Original: {data_to_hash}")
print(f"SHA-256 Hash: {hashed_result}")
